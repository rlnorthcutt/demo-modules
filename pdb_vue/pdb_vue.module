<?php

/**
 * @file
 * Any procedural Vue PHP work lives here.
 */

use Drupal\Core\Asset\AttachedAssetsInterface;

/**
 * Add our component paths for Vue.
 *
 * @param object $components
 *   List of individual block components.
 */
function pdb_vue_component_info_alter($components) {
  // Read info files for each module.
  foreach ($components as $key => $component) {
    // Set component path if it hasn't been hardcoded.
    if ($component->info['presentation'] == 'vue' && empty($component->info['path'])) {
      $component->info['path'] = $component->getPath();
    }
  }
}

/**
 * Implements hook_library_info_alter().
 */
function pdb_vue_library_info_alter(&$libraries, $extension) {
  if ($extension == 'pdb') {
    $discovery  = \Drupal::service('pdb.component_discovery');
    $components = $discovery->getComponents();

    // Loop through each component to look for any added library dependencies.
    foreach ($components as $component) {
      $info = $component->info;

      // Only look in Vue blocks with a library added.
      if ($info['presentation'] == 'vue' && !empty($info['libraries'])) {
        // Look into both header and footer locations.
        foreach (['header', 'footer'] as $location) {
          // Get the key name of the vue component library we will alter.
          $key = $info['machine_name'] . '/' . $location;

          // If the component library is set, add in our library dependencies.
          if (array_key_exists($key, $libraries)) {
            $libraries[$key]['dependencies'] = array_merge($libraries[$key]['dependencies'], $info['libraries']);
          }
        }
      }
    }
  }

  // Only look to progressively decoupled blocks.
  if ($extension == 'pdb_vue') {
    // Use the development version of vue.js or vuex.js if set.
    $config = \Drupal::config('pdb_vue.settings');
    if (isset($config) && $config->get('development_mode')) {

      foreach ($libraries as $name => $params) {
        $key = key($params['js']);

        if (strpos($key, '.min.js') !== FALSE) {
          $dev = str_replace('.min.js', '.js', $key);
          $libraries[$name]['js'][$dev] = $libraries[$name]['js'][$key];
          unset($libraries[$name]['js'][$key]);
        }
      }

    }
  }

}

/**
 * Implements hook_js_alter().
 */
function pdb_vue_js_alter(&$javascript, AttachedAssetsInterface $assets) {
  // Search for the spa-init.js file and move its weight to the bottom. This is
  // needed so that it renders all components that come before it.
  $spa_init = preg_grep("/spa-init/", array_keys($javascript));
  if ($spa_init) {
    // Get the weight of the last javascript file.
    end($javascript);
    $last_key = key($javascript);
    $last_weight = $javascript[$last_key]['weight'];
    // Get the key "filename" of the init javascript file.
    $filename = array_shift($spa_init);
    $javascript[$filename]['weight'] = $last_weight + .25;
  }
}
